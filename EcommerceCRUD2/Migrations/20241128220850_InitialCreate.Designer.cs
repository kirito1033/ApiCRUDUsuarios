// <auto-generated />
using System;
using EcommerceCRUD2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceCRUD2.Migrations
{
    [DbContext(typeof(ecommercetechdbContext))]
    [Migration("20241128220850_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("EcommerceCRUD2.Models.Ciudad", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint(6)")
                        .HasColumnName("id")
                        .HasComment("Identificador unico para las ciudades");

                    b.Property<sbyte>("Departamentoid")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("departamentoid")
                        .HasComment("Llave foranea de la tabla de departamento");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom")
                        .HasComment("Nombre de la ciudad");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Departamentoid" }, "FKCiudad399883");

                    b.ToTable("ciudad", (string)null);

                    b.HasComment("Identifica la ciudad donde se encuentra el cliente");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Departamento", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("id")
                        .HasComment("Identificador unico para los departamentos");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom")
                        .HasComment("Nombre del departamento");

                    b.HasKey("Id");

                    b.ToTable("departamento", (string)null);

                    b.HasComment("Identifica el departamento donde se encuentra el cliente a partir de la ciudad");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Rol", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("id")
                        .HasComment("Identificador unico del rol");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion")
                        .HasComment("Espacio destinado para indicar los permisos y descripcion general de cada rol");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("nom")
                        .HasComment("Identifica el rol del usuario");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);

                    b.HasComment("Espacio destinado para la gestion de roles");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.RolUsuario", b =>
                {
                    b.Property<sbyte>("RolIdRol")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("RolId_Rol")
                        .HasComment("Llave foranea de la tabla rol");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("int(10)")
                        .HasColumnName("UsuarioId_usuario")
                        .HasComment("Llave foranea de la tabla usuario");

                    b.Property<ulong>("Estado")
                        .HasColumnType("bit(1)")
                        .HasColumnName("estado")
                        .HasComment("Campo destinado para la activacion o desactivacion del rol de un usuario");

                    b.HasKey("RolIdRol", "UsuarioIdUsuario")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UsuarioIdUsuario" }, "FKRol_Usuari104401");

                    b.ToTable("rol_usuario", (string)null);

                    b.HasComment("Tabla para la asignacion de roles de usuarios");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.TipoDocumento", b =>
                {
                    b.Property<sbyte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("id")
                        .HasComment("Identificador unico del tipo de documento");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("nom")
                        .HasComment("Nombre del tipo de documento");

                    b.HasKey("Id");

                    b.ToTable("tipo_documento", (string)null);

                    b.HasComment("Tabla para la gestion del tipo de documento");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("Id_usuario")
                        .HasComment("Llave primaria que identifica de forma única al usuario");

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido_1")
                        .HasComment("Primer apellido del usuario");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("apellido_2")
                        .HasComment("segundo apellido del usuario");

                    b.Property<short>("CiudadId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("ciudadId")
                        .HasComment("Llave foranea de la tabla ciudad");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("Correo electronico del usuario");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasComment("Direcion donde se encuentra el usuario");

                    b.Property<long>("Doc")
                        .HasColumnType("bigint(11)")
                        .HasColumnName("doc")
                        .HasComment("Numero de documento del usuario.");

                    b.Property<string>("Nom1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom_1")
                        .HasComment("primer nombre del usuario");

                    b.Property<string>("Nom2")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nom_2")
                        .HasComment("Segundo nombre del usuario");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password")
                        .HasComment("Palabra secreta que permite el acceso a la plataforma");

                    b.Property<long>("Tel1")
                        .HasColumnType("bigint(10)")
                        .HasComment("Numero telefonico del usuario");

                    b.Property<long?>("Tel2")
                        .HasColumnType("bigint(10)")
                        .HasComment("Segundo numero de telefono del usuario");

                    b.Property<sbyte>("TipoDocId")
                        .HasColumnType("tinyint(3)")
                        .HasColumnName("tipo_DocId")
                        .HasComment("Llave foranea de la tabla tipo de documento");

                    b.Property<string>("Usuario1")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("usuario")
                        .HasComment("Nombre unico para ingresar al sistema ");

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Correo" }, "Correo")
                        .IsUnique();

                    b.HasIndex(new[] { "CiudadId" }, "FKUsuario642574");

                    b.HasIndex(new[] { "TipoDocId" }, "FKUsuario878723");

                    b.HasIndex(new[] { "Usuario1" }, "usuario")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);

                    b.HasComment("En esta tabla se gestionara la informacion de los usuarios");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Ciudad", b =>
                {
                    b.HasOne("EcommerceCRUD2.Models.Departamento", "Departamento")
                        .WithMany("Ciudads")
                        .HasForeignKey("Departamentoid")
                        .IsRequired()
                        .HasConstraintName("FKCiudad399883");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.RolUsuario", b =>
                {
                    b.HasOne("EcommerceCRUD2.Models.Rol", "RolIdRolNavigation")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("RolIdRol")
                        .IsRequired()
                        .HasConstraintName("FKRol_Usuari631635");

                    b.HasOne("EcommerceCRUD2.Models.Usuario", "UsuarioIdUsuarioNavigation")
                        .WithMany("RolUsuarios")
                        .HasForeignKey("UsuarioIdUsuario")
                        .IsRequired()
                        .HasConstraintName("FKRol_Usuari104401");

                    b.Navigation("RolIdRolNavigation");

                    b.Navigation("UsuarioIdUsuarioNavigation");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Usuario", b =>
                {
                    b.HasOne("EcommerceCRUD2.Models.Ciudad", "Ciudad")
                        .WithMany("Usuarios")
                        .HasForeignKey("CiudadId")
                        .IsRequired()
                        .HasConstraintName("FKUsuario642574");

                    b.HasOne("EcommerceCRUD2.Models.TipoDocumento", "TipoDoc")
                        .WithMany("Usuarios")
                        .HasForeignKey("TipoDocId")
                        .IsRequired()
                        .HasConstraintName("FKUsuario878723");

                    b.Navigation("Ciudad");

                    b.Navigation("TipoDoc");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Ciudad", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Departamento", b =>
                {
                    b.Navigation("Ciudads");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Rol", b =>
                {
                    b.Navigation("RolUsuarios");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.TipoDocumento", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("EcommerceCRUD2.Models.Usuario", b =>
                {
                    b.Navigation("RolUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
